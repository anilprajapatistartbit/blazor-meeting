@page "/changepassword"
@inject AuthenticationStateProvider asp;
@attribute [Authorize]
<PageTitle> Change Password</PageTitle>


<div class="card ">
    <div class="card-header">


        <BreadCrumb>
            <BreadCrumbItem Icon="" Path="/" Text="Home" Index=1 Active=@false />
            <BreadCrumbItem Icon="" Path="/changepassword" Text="Change Password" Index=2 Active=@true />
        </BreadCrumb>


    </div>
    <div class="card-body mt-2">
        <form class="mt-4" @onsubmit="onSumbit">
            <div class="form-group w-100">
                <div class="mt-2">
                   
                        <div class="col-12 col-md-4">
                            <input type="password" class="form-control my-3" style="border-radius:8px !important" placeholder="Old Password" @bind-value="pc.OldPassword" required>
                        </div>
                        <div class="col-12 col-md-4">
                            <input type="password" class="form-control my-3" style="border-radius:8px !important" placeholder="New Password" @bind-value="pc.NewPassword" required >
                        </div>
                        <div class="col-12 col-md-4">
                            <input type="password" class="form-control my-3" style="border-radius:8px !important" placeholder="Confirm Password" @bind-value="pc.ConfirmPassword" required>
                        </div>
                      
                </div>
              
                <input type="submit" value="Submit" style="border-radius:8px !important" class="form-control login-btn mt-3" />

            </div>
        </form>
    </div>
</div>

@code {
    public PasswordChange pc = new();
    [Inject]
    HttpClient httpClient { get; set; }
    [Inject]
    private NavigationManager navigationManager { get; set; }
    async Task onSumbit()
    {
        var user = await asp.GetAuthenticationStateAsync();
        if (!user.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/Accountlogin");

        }
        var Id = user.User.Claims.FirstOrDefault(s => s.Type == ClaimTypes.UserData);
        var Email = user.User.Claims.FirstOrDefault(s => s.Type == ClaimTypes.Email);
        pc.Email = Email.Value;
        pc.Id = Convert.ToInt32(Id.Value);
        if(pc.NewPassword != pc.ConfirmPassword)
        {

            navigationManager.NavigateTo("/changepassword");
        }
        else
        {
            var response = await httpClient.PostAsJsonAsync<PasswordChange>("api/Auth/changepassword", pc);
            if (response.IsSuccessStatusCode)
            {
                pc = new();
            }
        }
        

    }
}
