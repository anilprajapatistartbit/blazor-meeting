@page "/forgotpassword"
@using System.Web;
@inject ToastService ts;
@inject IJSRuntime js;
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.WebUtilities;
<PageTitle>Forgot Password</PageTitle>
<div class="">
    <div class="m-auto bg-white login-container p-4">
        <h5 class="login-heading">Forgot Password</h5>
        <p class="login-sub-heading text-secondary">If you  want to back to login page,<a href="/Accountlogin" class="register-color text-decoration-none">Click here</a>.</p>
        <form class="mt-4" @onsubmit="onSubmit">
            <input type="text" class="form-control mt-3" placeholder="OTP" @bind-value="fP.Otp" required>
            <input type="password" class="form-control mt-3" placeholder="New Password" @bind-value="fP.NewPassword" required>
            <input type="password" class="form-control mt-3" placeholder="Confirm Password" @bind-value="fP.ConfirmPassword" required>
            <input type="submit" value="Submit" class="form-control login-btn mt-3" />

        </form>
    </div>

</div>

@code {
    [Parameter]
    public string Email { get; set; }

    public FP fP = new();
    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue("Email", out var email);
        Email = email;
        var response = await httpClient.GetFromJsonAsync<StatusResponse<Login>>($"api/Auth/forgotpassword/{Email}");
        if (response.IsSuccess)
        {
            ts.Toast(response.Message, ToastLevel.Success, true);
            fP.Email = response.Result.User.Email;
        }
        else
        {
            ts.Toast(response.Message, ToastLevel.Error, true);

            await js.InvokeVoidAsync("clientJsfunctions.RedirectTo", "/Accountlogin");
        }
    }
    async Task onSubmit()
    {

        if (fP.NewPassword != fP.ConfirmPassword)
        {
            ts.Toast("confirm password should match with new password", ToastLevel.Error, true);
            //await js.InvokeVoidAsync("clientJsfunctions.RedirectTo", $"/forgotpassword/{Email}");
        }
        else
        {
            var response = await httpClient.PostAsJsonAsync<FP>("api/Auth/forgotpassword", fP);
            if (response.IsSuccessStatusCode)
            {

                var data = await response.Content.ReadFromJsonAsync<StatusResponse<Login>>();
                ts.Toast(data.Message, ToastLevel.Success, true);
                await js.InvokeVoidAsync("clientJsfunctions.RedirectTo", "/Accountlogin");
            }
            else
            {
                var data = await response.Content.ReadFromJsonAsync<StatusResponse<Login>>();
                ts.Toast(data.Message, ToastLevel.Success, true);
            }
        }
    }
}
