@page "/mymeetings/{Id}"
@inject AuthenticationStateProvider asp;
@attribute [Authorize]
@inject IJSRuntime js;
<PageTitle> Create Meeting</PageTitle>


<div class="card ">
    <div class="card-header">
        <BreadCrumb>
            <BreadCrumbItem Icon="" Path="/" Text="Home" Index=1 Active=@false />
            <BreadCrumbItem Icon="" Path="/mymeetings" Text="My Meetings" Index=2 Active=@false />
            <BreadCrumbItem Icon="" Path=@($"/mymeetings/{Id}") Text="Detail" Index=3 Active=@true />
        </BreadCrumb>
    </div>

    <div class="card-body mt-2">
        <form class="mt-3" @onsubmit="onSumbit">
            <div class="form-group w-100">
                <div class="mt-2">
                    <lagend class="lagend-register">Meeting Information</lagend>
                    <div class="row m-2 register-row p-2">
                        <div class="col-12 col-md-4">
                            <label class="lagend-register">Title</label>
                            <input type="text" class="form-control mb-2" style="border-radius:8px !important" placeholder="Title" @bind-value="meeting.Title" required>
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="lagend-register">Start datetime</label>
                            <input type="datetime-local" class="form-control mb-2" style="border-radius:8px !important" placeholder="Start Date Time" min="1900-01-01" max="2023-12-31" @bind-value="meeting.StartDateTime" required>
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="lagend-register">End datetime</label>
                            <input type="datetime-local" class="form-control mb-2" style="border-radius:8px !important" placeholder="Start Date Time" min="1900-01-01" max="2023-12-31" @bind-value="meeting.EndDateTime" required>
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="lagend-register">Description</label>
                            <input type="text" class="form-control mb-2" style="border-radius:8px !important" placeholder="Description" @bind-value="meeting.Description" required>
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="lagend-register">Meeting Type</label>
                            <select class="form-select form-control mb-2" style="border-radius:8px !important" @bind="meeting.Meeting_Type" required>
                                <option value="virtual" selected>Virtual</option>
                                <option value="physical">Physical</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-4">
                            <label class="lagend-register">Location/Url</label>
                            <input type="text" class="form-control mb-2" style="border-radius:8px !important" placeholder="Location/Url" @bind-value="meeting.Location" required>
                        </div>
                    </div>

                </div>

                <input type="submit" value="Update" style="border-radius:8px !important" class="btn btn-success btn-sm mt-1 ms-2" />
                <input type="button" value="Reset" @onclick="Reset" style="border-radius:8px !important" class="btn btn-danger btn-sm mt-1" />
            </div>
        </form>
    </div>

</div>

@code {
    [Parameter]
    public string Id { get; set; }
    public Meetings meeting = new();
    [Inject]
    HttpClient httpClient { get; set; }
    [Inject]
    private NavigationManager navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await asp.GetAuthenticationStateAsync();
        if (!user.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/Accountlogin");

        }
        var response = await httpClient.GetFromJsonAsync<StatusResponse<Meetings>>($"api/Meeting/detail/{Convert.ToInt32(Id)}");
        if (response.IsSuccess)
        {
            meeting = response.Result;
        }
    }
    async Task Reset()
    {
        await OnInitializedAsync();
    }
    async Task onSumbit()
    {
        var response = await httpClient.PutAsJsonAsync<Meetings>($"api/Meeting/{Convert.ToInt32(Id)}", meeting);
        if (response.IsSuccessStatusCode)
        {
            meeting = new(); 
            await js.InvokeVoidAsync("clientJsfunctions.RedirectTo", "/mymeetings");
        }
    }
}
